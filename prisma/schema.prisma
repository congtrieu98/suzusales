// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pages         Page[]
  pageLinks     PageLink[]
  consultants   Consultant[]
  contracts     Contract[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Page {
  id              String     @id @default(cuid())
  name            String
  description     String
  public          Boolean
  slug            String     @unique
  backgroundColor String     @default("#688663")
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  PageLink        PageLink[]
}

model PageLink {
  id        String   @id @default(cuid())
  title     String
  url       String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Consultant {
  id           String     @id @default(cuid())
  customerName String
  projectName  String
  content      String
  airDate      DateTime
  status       String
  creator      String
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Contract     Contract[]
}

model Contract {
  id               String     @id @default(cuid())
  customerContract String
  paymentSchedule  String
  scanContract     String
  finalContract    String
  customerAddress  String
  note             String
  status           String
  checkSteps       String[]
  consultant       Consultant @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  consultantId     String
  userId           String
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([userId])
}
